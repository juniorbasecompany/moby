{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\jr\\\\moby\\\\App.js\";\nimport React, { Component } from 'react';\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport i18n from \"i18n-js\";\nimport memoize from \"lodash.memoize\";\nvar instructions = Platform.select({\n  ios: 'Plataforma iOS',\n  android: 'Plataforma Android',\n  web: 'Plataforma WEB'\n});\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.handleLocalizationChange = function () {\n      setI18nConfig();\n\n      _this.forceUpdate();\n    };\n\n    setI18nConfig();\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        }\n      }, React.createElement(Text, {\n        style: styles.welcome,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        }\n      }, \"Tudo OK! 123\"), React.createElement(Text, {\n        style: styles.instructions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        }\n      }, instructions), React.createElement(Text, {\n        style: styles.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        }\n      }, translate(\"hello\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#EEEEEE'\n  },\n  welcome: {\n    fontSize: 40,\n    textAlign: 'center',\n    margin: 10,\n    color: '#888888'\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5\n  }\n});\nvar getTranslation = {\n  en_US: function en_US() {\n    return require(\"./src/locale/translation/en_US.json\");\n  },\n  pt_BR: function pt_BR() {\n    return require(\"./src/locale/translation/pt_BR.json\");\n  }\n};\nvar translate = memoize(function (key, config) {\n  return i18n.t(key, config);\n}, function (key, config) {\n  return config ? key + JSON.stringify(config) : key;\n});\n\nvar setI18nConfig = function setI18nConfig() {\n  var locale = \"en_US\";\n  AsyncStorage.getItem('locale').then(function (value) {\n    if (value) {\n      locale = value;\n    }\n  });\n  translate.cache.clear();\n  i18n.translations = _defineProperty({}, locale, getTranslation[locale]());\n  i18n.locale = locale;\n};","map":{"version":3,"sources":["C:/jr/moby/App.js"],"names":["React","Component","i18n","memoize","instructions","Platform","select","ios","android","web","App","props","handleLocalizationChange","setI18nConfig","forceUpdate","styles","container","welcome","value","translate","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","fontSize","textAlign","margin","color","marginBottom","getTranslation","en_US","require","pt_BR","key","config","t","JSON","stringify","locale","AsyncStorage","getItem","then","cache","clear","translations"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  AsyncStorage,\n  FlatList,\n  I18nManager,\n  Platform, \n  ScrollView,\n  StyleSheet,\n  Text, \n  TouchableOpacity,\n  View,\n  } from 'react-native';\n  import i18n from \"i18n-js\";\n  import memoize from \"lodash.memoize\"; // Use for caching/memoize for better performance\n\nconst instructions = Platform.select({\n  ios: 'Plataforma iOS',\n  android: 'Plataforma Android',\n  web: 'Plataforma WEB',\n});\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    setI18nConfig(); // set initial config\n  }\n\n  handleLocalizationChange = () => {\n    setI18nConfig();\n    this.forceUpdate();\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.welcome}>Tudo OK! 123</Text>\n        <Text style={styles.instructions}>{instructions}</Text>\n        <Text style={styles.value}>{translate(\"hello\")}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#EEEEEE',\n  },\n  welcome: {\n    fontSize: 40,\n    textAlign: 'center',\n    margin: 10,\n    color: '#888888',\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n\nconst getTranslation = {\n  en_US: () => require(\"./src/locale/translation/en_US.json\"),\n  pt_BR: () => require(\"./src/locale/translation/pt_BR.json\"),\n};\n\nconst translate = memoize(\n  (key, config) => i18n.t(key, config),\n  (key, config) => (config ? key + JSON.stringify(config) : key),\n);\n\nconst setI18nConfig = () => {\n  // Linguagem default.\n  var locale = \"en_US\";\n  // Vamos ler a linguagem que o usuário pode ter escolhido antes.\n  AsyncStorage.getItem('locale').then((value) => {\n    // Se ele havia escolhido...\n    if (value) {\n      // Vamos usar a linguágem que ele escolheu.\n      locale = value;\n    }\n  });\n\n  // Vamos limpar o cache de trandução.\n  translate.cache.clear();\n  \n  // E definir um novo conjunto de mensagens.\n  i18n.translations = { [locale]: getTranslation[locale]() };\n  i18n.locale = locale;\n};\n"]},"metadata":{},"sourceType":"module"}