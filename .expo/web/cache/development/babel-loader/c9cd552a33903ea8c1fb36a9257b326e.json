{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\jr\\\\moby\\\\App.js\";\nimport React, { Component } from 'react';\nimport * as RNLocalize from \"react-native-localize\";\nimport i18n from \"i18n-js\";\nimport memoize from \"lodash.memoize\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nvar instructions = Platform.select({\n  ios: 'Press Cmd+R to reload,\\n' + 'Cmd+D or shake for dev menu',\n  android: 'Double tap R on your keyboard to reload,\\n' + 'Shake or press menu button for dev menu'\n});\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.handleLocalizationChange = function () {\n      setI18nConfig();\n\n      _this.forceUpdate();\n    };\n\n    setI18nConfig();\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      RNLocalize.addEventListener(\"change\", this.handleLocalizationChange);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      RNLocalize.removeEventListener(\"change\", this.handleLocalizationChange);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        }\n      }, React.createElement(Text, {\n        style: styles.welcome,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        }\n      }, \"Tudo OK!\"), React.createElement(Text, {\n        style: styles.instructions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        }\n      }, \"To get started, edit App.js\"), React.createElement(Text, {\n        style: styles.instructions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        }\n      }, instructions), React.createElement(Text, {\n        style: styles.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        }\n      }, translate(\"hello\")));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF'\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5\n  }\n});\nvar translationGetters = {\n  en: function en() {\n    return require(\"./translations/en.json\");\n  },\n  fr: function fr() {\n    return require(\"./translations/fr.json\");\n  }\n};\nvar translate = memoize(function (key, config) {\n  return i18n.t(key, config);\n}, function (key, config) {\n  return config ? key + JSON.stringify(config) : key;\n});\n\nvar setI18nConfig = function setI18nConfig() {\n  var fallback = {\n    languageTag: \"en\",\n    isRTL: false\n  };\n\n  var _ref = RNLocalize.findBestAvailableLanguage(Object.keys(translationGetters)) || fallback,\n      languageTag = _ref.languageTag,\n      isRTL = _ref.isRTL;\n\n  translate.cache.clear();\n  I18nManager.forceRTL(isRTL);\n  i18n.translations = _defineProperty({}, languageTag, translationGetters[languageTag]());\n  i18n.locale = languageTag;\n};","map":{"version":3,"sources":["C:/jr/moby/App.js"],"names":["React","Component","RNLocalize","i18n","memoize","instructions","Platform","select","ios","android","App","props","handleLocalizationChange","setI18nConfig","forceUpdate","addEventListener","removeEventListener","styles","container","welcome","value","translate","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","fontSize","textAlign","margin","color","marginBottom","translationGetters","en","require","fr","key","config","t","JSON","stringify","fallback","languageTag","isRTL","findBestAvailableLanguage","Object","keys","cache","clear","I18nManager","forceRTL","translations","locale"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as RNLocalize from \"react-native-localize\";\nimport i18n from \"i18n-js\";\nimport memoize from \"lodash.memoize\"; // Use for caching/memoize for better performance\nimport { \n  I18nManager,\n  Platform, \n  ScrollView,\n  StyleSheet,\n  Text, \n  View\n  } from 'react-native';\n\nconst instructions = Platform.select({\n  ios: 'Press Cmd+R to reload,\\n' + 'Cmd+D or shake for dev menu',\n  android: 'Double tap R on your keyboard to reload,\\n' + 'Shake or press menu button for dev menu',\n});\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    setI18nConfig(); // set initial config\n  }\n\n  componentDidMount() {\n    RNLocalize.addEventListener(\"change\", this.handleLocalizationChange);\n  }\n\n  componentWillUnmount() {\n    RNLocalize.removeEventListener(\"change\", this.handleLocalizationChange);\n  }\n\n  handleLocalizationChange = () => {\n    setI18nConfig();\n    this.forceUpdate();\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.welcome}>Tudo OK!</Text>\n        <Text style={styles.instructions}>To get started, edit App.js</Text>\n        <Text style={styles.instructions}>{instructions}</Text>\n        <Text style={styles.value}>{translate(\"hello\")}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n  instructions: {\n    textAlign: 'center',\n    color: '#333333',\n    marginBottom: 5,\n  },\n});\n\nconst translationGetters = {\n  en: () => require(\"./translations/en.json\"),\n  fr: () => require(\"./translations/fr.json\")\n};\n\nconst translate = memoize(\n  (key, config) => i18n.t(key, config),\n  (key, config) => (config ? key + JSON.stringify(config) : key)\n);\n\nconst setI18nConfig = () => {\n  // fallback if no available language fits\n  const fallback = { languageTag: \"en\", isRTL: false };\n\n  const { languageTag, isRTL } =\n    RNLocalize.findBestAvailableLanguage(Object.keys(translationGetters)) ||\n    fallback;\n\n  // clear translation cache\n  translate.cache.clear();\n  // update layout direction\n  I18nManager.forceRTL(isRTL);\n  // set i18n-js config\n  i18n.translations = { [languageTag]: translationGetters[languageTag]() };\n  i18n.locale = languageTag;\n};"]},"metadata":{},"sourceType":"module"}