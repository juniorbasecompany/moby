{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { USES_FAHRENHEIT, USES_IMPERIAL, USES_RTL_LAYOUT, CURRENCIES } from \"./constants\";\nvar canUseDOM = !!(typeof window !== \"undefined\" && window.document && window.document.createElement);\n\nfunction ensureCountryCode(countryCode) {\n  return countryCode === \"419\" ? \"UN\" : countryCode.toUpperCase();\n}\n\nfunction splitLanguageTag(languageTag) {\n  var _languageTag$split = languageTag.split(\"-\"),\n      _languageTag$split2 = _slicedToArray(_languageTag$split, 2),\n      languageCode = _languageTag$split2[0],\n      countryCode = _languageTag$split2[1];\n\n  return {\n    languageCode: languageCode,\n    countryCode: countryCode\n  };\n}\n\nfunction convertLanguageTagToLocale(languageTag, countryCodeFallback) {\n  var _splitLanguageTag = splitLanguageTag(languageTag),\n      languageCode = _splitLanguageTag.languageCode,\n      countryCode = _splitLanguageTag.countryCode;\n\n  languageCode = languageCode.toLowerCase();\n  countryCode = ensureCountryCode(countryCode || countryCodeFallback);\n  return {\n    languageCode: languageCode,\n    countryCode: countryCode,\n    languageTag: languageCode + \"-\" + countryCode,\n    isRTL: USES_RTL_LAYOUT.includes(languageCode)\n  };\n}\n\nfunction getCurrentLocale() {\n  return convertLanguageTagToLocale(navigator.language, getCountry());\n}\n\nexport function getCalendar() {\n  return \"gregorian\";\n}\nexport function getCountry() {\n  var _navigator = navigator,\n      languages = _navigator.languages;\n\n  for (var i = 0; i < languages.length; i++) {\n    var _splitLanguageTag2 = splitLanguageTag(languages[i]),\n        countryCode = _splitLanguageTag2.countryCode;\n\n    if (countryCode) {\n      return ensureCountryCode(countryCode);\n    }\n  }\n\n  return \"US\";\n}\nexport function getCurrencies() {\n  var _navigator2 = navigator,\n      languages = _navigator2.languages;\n  var currencies = [];\n  languages.forEach(function (language) {\n    var _splitLanguageTag3 = splitLanguageTag(language),\n        countryCode = _splitLanguageTag3.countryCode;\n\n    if (countryCode) {\n      var currency = CURRENCIES[ensureCountryCode(countryCode)];\n\n      if (currencies.indexOf(currency) === -1) {\n        currencies.push(currency);\n      }\n    }\n  });\n\n  if (currencies.length === 0) {\n    currencies.push(\"USD\");\n  }\n\n  return currencies;\n}\nexport function getLocales() {\n  var _navigator3 = navigator,\n      languages = _navigator3.languages;\n  var countryCode = getCountry();\n  var cache = [];\n  var locales = [];\n  languages.forEach(function (language) {\n    var locale = convertLanguageTagToLocale(language, countryCode);\n\n    if (cache.indexOf(locale.languageTag) === -1) {\n      locales.push(locale);\n      cache.push(locale.languageTag);\n    }\n  });\n  return locales;\n}\nexport function getNumberFormatSettings() {\n  var _getCurrentLocale = getCurrentLocale(),\n      languageTag = _getCurrentLocale.languageTag;\n\n  var formatter = new Intl.NumberFormat(languageTag);\n\n  var separators = _toConsumableArray(formatter.format(1000000.1).replace(/\\d/g, \"\"));\n\n  return {\n    decimalSeparator: separators[separators.length - 1],\n    groupingSeparator: separators[0]\n  };\n}\nexport function getTemperatureUnit() {\n  return USES_FAHRENHEIT.includes(getCountry()) ? \"fahrenheit\" : \"celsius\";\n}\nexport function getTimeZone() {\n  var _getCurrentLocale2 = getCurrentLocale(),\n      languageTag = _getCurrentLocale2.languageTag;\n\n  var formatter = new Intl.DateTimeFormat(languageTag, {\n    hour: \"numeric\"\n  });\n  return formatter.resolvedOptions().timeZone || \"Etc/UTC\";\n}\nexport function uses24HourClock() {\n  var _getCurrentLocale3 = getCurrentLocale(),\n      languageTag = _getCurrentLocale3.languageTag;\n\n  var formatter = new Intl.DateTimeFormat(languageTag, {\n    hour: \"numeric\"\n  });\n  return !formatter.format(new Date(2000, 0, 1, 20)).match(/am|pm/i);\n}\nexport function usesMetricSystem() {\n  return !USES_IMPERIAL.includes(getCountry());\n}\nexport function usesAutoDateAndTime() {}\nexport function usesAutoTimeZone() {}\nexport var handlers = new Set();\n\nif (canUseDOM) {\n  window.addEventListener(\"languagechange\", function () {\n    handlers.forEach(function (handler) {\n      return handler();\n    });\n  });\n}","map":{"version":3,"sources":["module.web.js"],"names":["canUseDOM","window","countryCode","languageCode","languageTag","splitLanguageTag","ensureCountryCode","isRTL","USES_RTL_LAYOUT","convertLanguageTagToLocale","navigator","getCountry","languages","i","currencies","currency","CURRENCIES","cache","locales","locale","getCurrentLocale","formatter","Intl","separators","decimalSeparator","groupingSeparator","USES_FAHRENHEIT","hour","USES_IMPERIAL","handlers","handler"],"mappings":"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","sourcesContent":["// @flow\n\nimport {\n  USES_FAHRENHEIT,\n  USES_IMPERIAL,\n  USES_RTL_LAYOUT,\n  CURRENCIES,\n} from \"./constants\";\n\nimport type {\n  Calendar,\n  Locale,\n  NumberFormatSettings,\n  Option,\n  TemperatureUnit,\n} from \"./types\";\n\nconst canUseDOM = !!(\n  typeof window !== \"undefined\" &&\n  window.document &&\n  window.document.createElement\n);\n\nfunction ensureCountryCode(countryCode: string): string {\n  return countryCode === \"419\" ? \"UN\" : countryCode.toUpperCase();\n}\n\nfunction splitLanguageTag(\n  languageTag: string,\n): {|\n  languageCode: string,\n  countryCode?: string,\n|} {\n  const [languageCode, countryCode] = languageTag.split(\"-\");\n  return { languageCode, countryCode };\n}\n\nfunction convertLanguageTagToLocale(\n  languageTag: string,\n  countryCodeFallback: string,\n): Locale {\n  let { languageCode, countryCode } = splitLanguageTag(languageTag);\n  languageCode = languageCode.toLowerCase();\n  countryCode = ensureCountryCode(countryCode || countryCodeFallback);\n\n  return {\n    languageCode,\n    countryCode,\n    languageTag: `${languageCode}-${countryCode}`,\n    isRTL: USES_RTL_LAYOUT.includes(languageCode),\n  };\n}\n\nfunction getCurrentLocale(): Locale {\n  return convertLanguageTagToLocale(navigator.language, getCountry());\n}\n\nexport function getCalendar(): Calendar {\n  return \"gregorian\";\n}\n\nexport function getCountry(): string {\n  const { languages } = navigator;\n\n  for (let i = 0; i < languages.length; i++) {\n    const { countryCode } = splitLanguageTag(languages[i]);\n\n    if (countryCode) {\n      return ensureCountryCode(countryCode);\n    }\n  }\n\n  return \"US\";\n}\n\nexport function getCurrencies(): string[] {\n  const { languages } = navigator;\n  const currencies: string[] = [];\n\n  languages.forEach(language => {\n    const { countryCode } = splitLanguageTag(language);\n\n    if (countryCode) {\n      const currency = CURRENCIES[ensureCountryCode(countryCode)];\n\n      if (currencies.indexOf(currency) === -1) {\n        currencies.push(currency);\n      }\n    }\n  });\n\n  if (currencies.length === 0) {\n    currencies.push(\"USD\");\n  }\n\n  return currencies;\n}\n\nexport function getLocales(): Locale[] {\n  const { languages } = navigator;\n  const countryCode = getCountry();\n  const cache: string[] = [];\n  const locales: Locale[] = [];\n\n  languages.forEach(language => {\n    const locale = convertLanguageTagToLocale(language, countryCode);\n\n    if (cache.indexOf(locale.languageTag) === -1) {\n      locales.push(locale);\n      cache.push(locale.languageTag);\n    }\n  });\n\n  return locales;\n}\n\nexport function getNumberFormatSettings(): NumberFormatSettings {\n  const { languageTag } = getCurrentLocale();\n  const formatter = new Intl.NumberFormat(languageTag);\n  const separators = [...formatter.format(1000000.1).replace(/\\d/g, \"\")];\n\n  return {\n    decimalSeparator: separators[separators.length - 1],\n    groupingSeparator: separators[0],\n  };\n}\n\nexport function getTemperatureUnit(): TemperatureUnit {\n  return USES_FAHRENHEIT.includes(getCountry()) ? \"fahrenheit\" : \"celsius\";\n}\n\nexport function getTimeZone(): string {\n  const { languageTag } = getCurrentLocale();\n  const formatter = new Intl.DateTimeFormat(languageTag, { hour: \"numeric\" });\n  return formatter.resolvedOptions().timeZone || \"Etc/UTC\";\n}\n\nexport function uses24HourClock(): boolean {\n  const { languageTag } = getCurrentLocale();\n  const formatter = new Intl.DateTimeFormat(languageTag, { hour: \"numeric\" });\n  return !formatter.format(new Date(2000, 0, 1, 20)).match(/am|pm/i);\n}\n\nexport function usesMetricSystem(): boolean {\n  return !USES_IMPERIAL.includes(getCountry());\n}\n\nexport function usesAutoDateAndTime(): Option<boolean> {}\nexport function usesAutoTimeZone(): Option<boolean> {}\n\nexport const handlers: Set<Function> = new Set();\n\nif (canUseDOM) {\n  window.addEventListener(\"languagechange\", () => {\n    handlers.forEach(handler => handler());\n  });\n}\n"]},"metadata":{},"sourceType":"module"}