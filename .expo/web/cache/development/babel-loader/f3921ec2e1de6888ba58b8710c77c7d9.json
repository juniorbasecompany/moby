{"ast":null,"code":"import { getLocales, handlers } from \"./module\";\nexport { getCalendar, getCountry, getCurrencies, getLocales, getNumberFormatSettings, getTemperatureUnit, getTimeZone, uses24HourClock, usesMetricSystem, usesAutoDateAndTime, usesAutoTimeZone } from \"./module\";\n\nfunction logUnknownEvent(type) {\n  console.error(\"`\" + type + \"` is not a valid react-native-localize event\");\n}\n\nfunction getPartialTag(_ref) {\n  var languageCode = _ref.languageCode,\n      scriptCode = _ref.scriptCode;\n  return languageCode + (scriptCode ? \"-\" + scriptCode : \"\");\n}\n\nexport function addEventListener(type, handler) {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\nexport function removeEventListener(type, handler) {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\nexport function findBestAvailableLanguage(languageTags) {\n  var locales = getLocales();\n\n  for (var i = 0; i < locales.length; i++) {\n    var currentLocale = locales[i];\n    var languageTag = currentLocale.languageTag,\n        languageCode = currentLocale.languageCode,\n        isRTL = currentLocale.isRTL;\n\n    if (languageTags.includes(languageTag)) {\n      return {\n        languageTag: languageTag,\n        isRTL: isRTL\n      };\n    }\n\n    var partial = getPartialTag(currentLocale);\n    var next = locales[i + 1];\n\n    if ((!next || partial !== getPartialTag(next)) && languageTags.includes(partial)) {\n      return {\n        languageTag: partial,\n        isRTL: isRTL\n      };\n    }\n\n    if ((!next || languageCode !== next.languageCode) && languageTags.includes(languageCode)) {\n      return {\n        languageTag: languageCode,\n        isRTL: isRTL\n      };\n    }\n  }\n}","map":{"version":3,"sources":["index.js"],"names":["console","languageCode","scriptCode","type","logUnknownEvent","handlers","locales","getLocales","i","currentLocale","languageTag","isRTL","languageTags","partial","getPartialTag","next"],"mappings":"AAEA,SAAA,UAAA,EAAA,QAAA;AAmBA,SAAA,WAAA,EAAA,UAAA,EAAA,aAAA,EAAA,UAAA,EAAA,uBAAA,EAAA,kBAAA,EAAA,WAAA,EAAA,eAAA,EAAA,gBAAA,EAAA,mBAAA,EAAA,gBAAA;;AAcA,SAAA,eAAA,CAAA,IAAA,EAAuC;AACrCA,EAAAA,OAAO,CAAPA,KAAAA,CAAAA,MAAAA,IAAAA,GAAAA,8CAAAA;AAEF;;AAAA,SAAA,aAAA,CAAA,IAAA,EAA6D;AAApCC,MAAAA,YAAoC,GAAA,IAAA,CAApCA,YAAAA;AAAAA,MAAcC,UAAsB,GAAA,IAAA,CAAtBA,UAAdD;AACvB,SAAOA,YAAY,IAAIC,UAAU,GAAG,MAAH,UAAA,GAAjC,EAAmB,CAAnB;AAGF;;AAAA,OAAO,SAAA,gBAAA,CAAA,IAAA,EAAA,OAAA,EAGC;AACN,MAAIC,IAAI,KAAR,QAAA,EAAuB;AACrBC,IAAAA,eAAe,CAAfA,IAAe,CAAfA;AADF,GAAA,MAEO,IAAI,CAACC,QAAQ,CAARA,GAAAA,CAAL,OAAKA,CAAL,EAA4B;AACjCA,IAAAA,QAAQ,CAARA,GAAAA,CAAAA,OAAAA;AAEH;AAED;AAAA,OAAO,SAAA,mBAAA,CAAA,IAAA,EAAA,OAAA,EAGC;AACN,MAAIF,IAAI,KAAR,QAAA,EAAuB;AACrBC,IAAAA,eAAe,CAAfA,IAAe,CAAfA;AADF,GAAA,MAEO,IAAIC,QAAQ,CAARA,GAAAA,CAAJ,OAAIA,CAAJ,EAA2B;AAChCA,IAAAA,QAAQ,CAARA,MAAAA,CAAAA,OAAAA;AAEH;AAED;AAAA,OAAO,SAAA,yBAAA,CAAA,YAAA,EAKG;AACR,MAAMC,OAAO,GAAGC,UAAhB,EAAA;;AAEA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,OAAO,CAA3B,MAAA,EAAoCE,CAApC,EAAA,EAAyC;AACvC,QAAMC,aAAa,GAAGH,OAAO,CAA7B,CAA6B,CAA7B;AADuC,QAE/BI,WAF+B,GAEMD,aAFN,CAAA,WAAA;AAAA,QAElBR,YAFkB,GAEMQ,aAFN,CAAA,YAAA;AAAA,QAEJE,KAFI,GAEMF,aAFN,CAAA,KAAA;;AAIvC,QAAIG,YAAY,CAAZA,QAAAA,CAAJ,WAAIA,CAAJ,EAAwC;AACtC,aAAO;AAAEF,QAAAA,WAAW,EAAb,WAAA;AAAeC,QAAAA,KAAK,EAA3B;AAAO,OAAP;AAGF;;AAAA,QAAME,OAAO,GAAGC,aAAa,CAA7B,aAA6B,CAA7B;AACA,QAAMC,IAAI,GAAGT,OAAO,CAACE,CAAC,GAAtB,CAAoB,CAApB;;AAEA,QACE,CAAC,CAAA,IAAA,IAASK,OAAO,KAAKC,aAAa,CAAnC,IAAmC,CAAnC,KACAF,YAAY,CAAZA,QAAAA,CAFF,OAEEA,CAFF,EAGE;AACA,aAAO;AAAEF,QAAAA,WAAW,EAAb,OAAA;AAAwBC,QAAAA,KAAK,EAApC;AAAO,OAAP;AAGF;;AAAA,QACE,CAAC,CAAA,IAAA,IAASV,YAAY,KAAKc,IAAI,CAA/B,YAAA,KACAH,YAAY,CAAZA,QAAAA,CAFF,YAEEA,CAFF,EAGE;AACA,aAAO;AAAEF,QAAAA,WAAW,EAAb,YAAA;AAA6BC,QAAAA,KAAK,EAAzC;AAAO,OAAP;AAEH;AACF;AAAA","sourcesContent":["// @flow\n\nimport { getLocales, handlers } from \"./module\";\n\nimport type {\n  Calendar,\n  Locale,\n  LocalizationEvent,\n  NumberFormatSettings,\n  Option,\n  TemperatureUnit,\n} from \"./types\";\n\nexport type {\n  Calendar,\n  Locale,\n  LocalizationEvent,\n  NumberFormatSettings,\n  TemperatureUnit,\n} from \"./types\";\n\nexport {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesMetricSystem,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n} from \"./module\";\n\nfunction logUnknownEvent(type: string) {\n  console.error(`\\`${type}\\` is not a valid react-native-localize event`);\n}\nfunction getPartialTag({ languageCode, scriptCode }: Locale) {\n  return languageCode + (scriptCode ? \"-\" + scriptCode : \"\");\n}\n\nexport function addEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\n\nexport function removeEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\n\nexport function findBestAvailableLanguage(\n  languageTags: string[],\n): {|\n  languageTag: string,\n  isRTL: boolean,\n|} | void {\n  const locales = getLocales();\n\n  for (let i = 0; i < locales.length; i++) {\n    const currentLocale = locales[i];\n    const { languageTag, languageCode, isRTL } = currentLocale;\n\n    if (languageTags.includes(languageTag)) {\n      return { languageTag, isRTL };\n    }\n\n    const partial = getPartialTag(currentLocale);\n    const next = locales[i + 1];\n\n    if (\n      (!next || partial !== getPartialTag(next)) &&\n      languageTags.includes(partial)\n    ) {\n      return { languageTag: partial, isRTL };\n    }\n\n    if (\n      (!next || languageCode !== next.languageCode) &&\n      languageTags.includes(languageCode)\n    ) {\n      return { languageTag: languageCode, isRTL };\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}